
/* STARTER TEMPLATE MIXINS */

.transition (@transition) {
	-webkit-transition: @transition;
	-moz-transition: @transition;
	-ms-transition: @transition;
	-o-transition: @transition;
	transition: @transition;
}

.transition2 (@transition1, @transition2) {
	-webkit-transition: @transition1, @transition2;
	-moz-transition: @transition1, @transition2;
	-ms-transition: @transition1, @transition2;
	-o-transition: @transition1, @transition2;
	transition: @transition1, @transition2;
}

.transition3 (@transition1, @transition2, @transition3) {
	-webkit-transition: @transition1, @transition2, @transition3;
	-moz-transition: @transition1, @transition2, @transition3;
	-ms-transition: @transition1, @transition2, @transition3;
	-o-transition: @transition1, @transition2, @transition3;
	transition: @transition1, @transition2, @transition3;
}

.transition4 (@transition1, @transition2, @transition3, @transition4) {
	-webkit-transition: @transition1, @transition2, @transition3, @transition4;
	-moz-transition: @transition1, @transition2, @transition3, @transition4;
	-ms-transition: @transition1, @transition2, @transition3, @transition4;
	-o-transition: @transition1, @transition2, @transition3, @transition4;
	transition: @transition1, @transition2, @transition3, @transition4;
}

.transform (@string) {
	-webkit-transform: @string;
	-moz-transform: @string;
	-ms-transform: @string;
	-o-transform: @string;
	transform: @string;
}

.scale (@x, @y: 1.0) {
	-webkit-transform: scale(@x, @y);
	-moz-transform: scale(@x, @y);
	-ms-transform: scale(@x, @y);
	-o-transform: scale(@x, @y);
  transform: scale(@x, @y);
}

.rotate (@deg) {
	-webkit-transform: rotate(@deg);
	-moz-transform: rotate(@deg);
	-ms-transform: rotate(@deg);
	-o-transform: rotate(@deg);
  transform: rotate(@deg);
}

.skew (@deg, @deg2) {
	-webkit-transform: skew(@deg, @deg2);
	-moz-transform: skew(@deg, @deg2);
	-ms-transform: skew(@deg, @deg2);
	-o-transform: skew(@deg, @deg2);
  transform: skew(@deg, @deg2);
}

.translate (@x, @y:0) {
	-webkit-transform: translate(@x, @y);
	-moz-transform: translate(@x, @y);
	-ms-transform: translate(@x, @y);
	-o-transform: translate(@x, @y);
  transform: translate(@x, @y);
}

.translate3d (@x, @y: 0, @z: 0) {
	-webkit-transform: translate3d(@x, @y, @z);
	-moz-transform: translate3d(@x, @y, @z);
	-ms-transform: translate3d(@x, @y, @z);
	-o-transform: translate3d(@x, @y, @z);
  transform: translate3d(@x, @y, @z);
}

.perspective (@value: 1000) {
	-webkit-perspective: @value;
	-moz-perspective: @value;
	-ms-perspective: @value;
	perspective: @value;
}


.transform-origin (@x:center, @y:center) {
	-webkit-transform-origin: @x @y;
	-moz-transform-origin: @x @y;
	-ms-transform-origin: @x @y;
	-o-transform-origin: @x @y;
  transform-origin: @x @y;
}

// Flexbox mixins for parent (containers)

.display-flex(@flex: flex){
  display: ~"-webkit-@{flex}";
  display: ~"-moz-@{flex}";
  display: ~"-ms-@{flex}";
  display: ~"-ms-@{flex}";
  display: ~"@{flex}";
}

.justify-content(@justify: space-between){
  -webkit-justify-content: @justify;
     -moz-justify-content: @justify;
      -ms-justify-content: @justify;
          justify-content: @justify;
}

.flex-direction(@direction: row){
  -webkit-flex-direction: @direction;
     -moz-flex-direction: @direction;
      -ms-flex-direction: @direction;
          flex-direction: @direction;
}

.align-items(@align: stretch) {
  -webkit-align-items: @align;
     -moz-align-items: @align;
      -ms-align-items: @align;
          align-items: @align;
}

.flex-flow(@direction, @wrap) {
	-webkit-flex-flow: @direction @wrap;
	-moz-flex-flow: @direction @wrap;
	-ms-flex-flow: @direction @wrap;
	flex-flow: @direction @wrap;
}

// Flexbox mixins for children (items)

.align-self(@align: auto) {
  -webkit-align-self: @align;
     -moz-align-self: @align;
      -ms-align-self: @align;
          align-self: @align;
}

.flex-order(@order: 0) {
  -webkit-order: @order;
     -moz-order: @order;
      -ms-order: @order;
          order: @order;
}

.flex-grow(@grow: 0) {
  -webkit-flex-grow: @grow;
     -moz-flex-grow: @grow;
      -ms-flex-grow: @grow;
          flex-grow: @grow;
}

.flex-basis(@basis: auto) {
  -webkit-flex-basis: @basis;
     -moz-flex-basis: @basis;
      -ms-flex-basis: @basis;
          flex-basis: @basis;
}

.flex(@grow, @shrink, @basis) {
	-webkit-flex: @grow @shrink @basis;
     -moz-flex: @grow @shrink @basis;
      -ms-flex: @grow @shrink @basis;
          flex: @grow @shrink @basis;
}

// Font scaling mixin

.scale-font (@min-font-size, @max-font-size, @equilibrium-width, @container-width: 1) {

  // do the math
  @container-ratio: 100 * @container-width;
  @vw-size: @max-font-size / (@equilibrium-width / @container-ratio);
  //set the breakpoints
  @lower-breakpoint: round(100 * @min-font-size / @vw-size);
  @upper-breakpoint: round(100 * @max-font-size / @vw-size);

  // set square and above viewports (landscape) font size based on vw, enforce minimum and maximum
  @media screen and (min-aspect-ratio: 1/1) and (min-width: @lower-breakpoint) and (max-width: @upper-breakpoint) {
    font-size: unit(@vw-size, vw);
  }
  @media screen and (min-aspect-ratio: 1/1) and (max-width: @lower-breakpoint) {
    font-size: @min-font-size;
  }
  @media screen and (min-aspect-ratio: 1/1) and (min-width: @upper-breakpoint) {
    font-size: @max-font-size;
  }

  // set square and below (portrait) font size based on vh, enforce minimum and maximum
  @media screen and (max-aspect-ratio: 1/1) and (min-width: @lower-breakpoint) and (max-width: @upper-breakpoint) {
    font-size: unit(@vw-size, vh);
  }
  @media screen and (max-aspect-ratio: 1/1) and (max-width: @lower-breakpoint) {
    font-size: @min-font-size;
  }
  @media screen and (max-aspect-ratio: 1/1) and (min-width: @upper-breakpoint) {
    font-size: @max-font-size;
  }

}
